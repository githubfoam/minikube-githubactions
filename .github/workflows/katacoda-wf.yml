name: "Ubuntu katacoda minikube CI workflow"


on:
  push:
    branches: [ test ]
  # schedule:
  #     - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month 
      
      
jobs:

  ubuntu-latest-job-scenario1:
    name: "Launch A Single Node Cluster - ubuntu-latest minikube job"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
          echo "===================================================================================="
                        hostnamectl status
          echo "===================================================================================="
          echo "         \   ^__^                                                                  "
          echo "          \  (oo)\_______                                                          "
          echo "             (__)\       )\/\                                                      "
          echo "                 ||----w |                                                         "
          echo "                 ||     ||                                                         "
          echo "===================================================================================="
          #install netstat
          sudo apt-get install -y net-tools
          netstat -v
    # https://minikube.sigs.k8s.io/docs/start/
    - name: "Step 1 - Start Minikube"
      run: |
        minikube start
        n=0; until ((n >= 60)); do kubectl -n default get serviceaccount default -o name && break; n=$((n + 1)); sleep 1; done; ((n < 60)) 
        sleep 25
        minikube version --short
        minikube version --components
    - name: "Step 2 - Cluster Info"
      run: |
        kubectl cluster-info
        kubectl get nodes     
    - name: "Step 3 - Deploy Containers"
      run: |
        kubectl create deployment first-deployment --image=katacoda/docker-http-server
        sleep 20
        kubectl get pods 
        # NodePort, that provides a dynamic port to a container
        kubectl expose deployment first-deployment --port=80 --type=NodePort
        # finds the allocated port and executes a HTTP request.
        export PORT=$(kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}')
        echo $PORT
        # echo "Accessing localhost:$PORT"
        # curl localhost:$PORT      
        # netstat -alun | grep  $PORT 
    - name: "Step 4 - Dashboard"
      run: |
        # Some dashboard features require the metrics-server addon
        minikube addons enable metrics-server	
        #Enable the dashboard
        minikube addons enable dashboard
        kubectl apply -f /opt/kubernetes-dashboard.yaml
        sleep 20
        kubectl get pods -n kubernetes-dashboard -w

  ubuntu-latest-job-scenario2:
    name: "Start containers using Kubectl  - ubuntu-latest minikube job"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
          echo "===================================================================================="
                        hostnamectl status
          echo "===================================================================================="
          echo "         \   ^__^                                                                  "
          echo "          \  (oo)\_______                                                          "
          echo "             (__)\       )\/\                                                      "
          echo "                 ||----w |                                                         "
          echo "                 ||     ||                                                         "
          echo "===================================================================================="
    # https://minikube.sigs.k8s.io/docs/start/
    - name: "Step 1 - Launch Cluster"
      run: |
        minikube start
        n=0; until ((n >= 60)); do kubectl -n default get serviceaccount default -o name && break; n=$((n + 1)); sleep 1; done; ((n < 60)) 
        sleep 25
        minikube version --short
        minikube version --components
        kubectl get nodes
    - name: "Step 2 - Kubectl Run"
      run: |
        kubectl run http --image=katacoda/docker-http-server:latest -- replicas=1
        kubectl get deployments
        kubectl describe deployment http
    - name: "Step 3 - Kubectl Expose"
      run: |
        kubectl expose deployment http --external-ip="172.17.0.35" --port=8000 --target-port=80
        curl http://172.17.0.35:8000       
    - name: "Step 4 - Kubectl Run and Expose"
      run: |
        kubectl run httpexposed --image=katacoda/docker-http-server:latest --replicas=1 --port=80 --hostport=8001
        curl http://172.17.0.35:8001
        docker ps | grep httpexposed 
    - name: "Step 5 - Scale Containers"
      run: |
        kubectl scale --replicas=3 deployment http
        kubectl get pods
        kubectl describe svc http
        curl http://172.17.0.35:8000        

  # ubuntu-latest-job:
  #   name: "ubuntu-latest minikube job"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #         echo "===================================================================================="
  #                       hostnamectl status
  #         echo "===================================================================================="
  #         echo "         \   ^__^                                                                  "
  #         echo "          \  (oo)\_______                                                          "
  #         echo "             (__)\       )\/\                                                      "
  #         echo "                 ||----w |                                                         "
  #         echo "                 ||     ||                                                         "
  #         echo "===================================================================================="
  #   # https://minikube.sigs.k8s.io/docs/start/
  #   - name: "Start a minikube cluster"
  #     run: |
  #       minikube start
  #       n=0; until ((n >= 60)); do kubectl -n default get serviceaccount default -o name && break; n=$((n + 1)); sleep 1; done; ((n < 60)) 
  #       sleep 25
  #       minikube version --short
  #       minikube version --components
  #   - name: "Interact with your cluster"
  #     run: |
  #       kubectl get po -A
  #       # minikube can download the appropriate version of kubectl
  #       minikube kubectl -- get po -A
  #   - name: "dashboard"
  #     run: |
  #       # xdg-open: no method available for opening 'http://127.0.0.1:33631/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/'
  #       # X Exiting due to HOST_BROWSER: failed to open browser: exit status 3
  #       # minikube dashboard
  #       #/usr/bin/xdg-open: 869: www-browser: not found
  #       minikube dashboard &
  #   - name: "Deploy applications"
  #     run: |
  #       # Create a sample deployment and expose it on port 8080
  #       kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
  #       kubectl expose deployment hello-minikube --type=NodePort --port=8080        
  #       sleep 10
  #       kubectl get services hello-minikube
  #       # minikube launch a web browser
  #       #xdg-open: no method available for opening 'http://192.168.49.2:30792
  #       minikube service hello-minikube &
  #       # Alternatively, use kubectl to forward the port
  #       # kubectl port-forward service/hello-minikube 7080:8080
  #       # http://localhost:7080


  # ubuntu-2004-job:
  #   name: "ubuntu-20.04 minikube job"
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #         echo "===================================================================================="
  #                       hostnamectl status
  #         echo "===================================================================================="
  #         echo "         \   ^__^                                                                  "
  #         echo "          \  (oo)\_______                                                          "
  #         echo "             (__)\       )\/\                                                      "
  #         echo "                 ||----w |                                                         "
  #         echo "                 ||     ||                                                         "
  #         echo "===================================================================================="
  #   - name: "Start a minikube cluster"
  #     run: |
  #       minikube start
  #       n=0; until ((n >= 60)); do kubectl -n default get serviceaccount default -o name && break; n=$((n + 1)); sleep 1; done; ((n < 60)) 
  #       minikube version --short
  #       minikube version --components

  # ubuntu-1804-job:
  #   name: "ubuntu-18.04 minikube job"
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #         echo "===================================================================================="
  #                       hostnamectl status
  #         echo "===================================================================================="
  #         echo "         \   ^__^                                                                  "
  #         echo "          \  (oo)\_______                                                          "
  #         echo "             (__)\       )\/\                                                      "
  #         echo "                 ||----w |                                                         "
  #         echo "                 ||     ||                                                         "
  #         echo "===================================================================================="
  #   - name: "Start a minikube cluster"
  #     run: |
  #       minikube start
  #       n=0; until ((n >= 60)); do kubectl -n default get serviceaccount default -o name && break; n=$((n + 1)); sleep 1; done; ((n < 60)) 
  #       minikube version --short
  #       minikube version --components

  # ubuntu-1604-job:
  #   name: "ubuntu-16.04 minikube job"
  #   runs-on: ubuntu-16.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #         echo "===================================================================================="
  #                       hostnamectl status
  #         echo "===================================================================================="
  #         echo "         \   ^__^                                                                  "
  #         echo "          \  (oo)\_______                                                          "
  #         echo "             (__)\       )\/\                                                      "
  #         echo "                 ||----w |                                                         "
  #         echo "                 ||     ||                                                         "
  #         echo "===================================================================================="  
  #   - name: "Start a minikube cluster"
  #     run: |
  #       minikube start
  #       n=0; until ((n >= 60)); do kubectl -n default get serviceaccount default -o name && break; n=$((n + 1)); sleep 1; done; ((n < 60)) 
  #       minikube version --short
  #       # Error: unknown flag: --components
  #       # minikube version --components
